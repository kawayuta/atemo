<div class="header">
  <h1><%= link_to 'atemo', emos_path %></h1>
</div>

<div class="container">
  <h1>atemo</h1>

  <div class="form">
   <%= render 'form', emo: @emo %>
  </div>

  <div class="about">
    <h2>文章中を分析し言葉から「色」「音」「絵」を生成し感動を与えます。</h2>
    <ul>
      <li><%= fa_icon "tint" %><h3>色</h3><p>美しい色で表現</p></li>
      <li><%= fa_icon "music" %><h3>音</h3><p>心地良い音で表現</p></li>
      <li><%= fa_icon "moon-o" %><h3>絵</h3><p>気持ちの良い映像を生成。</p></li>
    </ul>
  </div>
  <div class="grad"></div>
</div>


<script>
  var SEPARATION = 40,
    AMOUNTX = 35,
    AMOUNTY = 35;

  var container, stats;
  var camera, scene, renderer;

  var particles, particle, count = 0;

  var windowHalfX = window.innerWidth / 2;
  var windowHalfY = window.innerHeight / 2;

  init();
  animate();

  function init() {

    container = document.createElement('div');
    document.body.appendChild(container);

    camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);
    camera.position.z = 750;
    camera.position.y = 100;

    scene = new THREE.Scene();

    particles = new Array();

    var PI2 = Math.PI * 2;

    var material = new THREE.SpriteCanvasMaterial({

      color: 0xED1C5B,
      program: function(context) {

        context.beginPath();
        context.arc(0.5, 0, 0.05, PI2, 0.1, true);
        // context.lineTo(3, 5),
        context.shadowBlur = 25;
        context.shadowColor = "#08132B";
        context.fill();

      }

    });

    var i = 0;

    for (var ix = 0; ix < AMOUNTX; ix++) {

      for (var iy = 0; iy < AMOUNTY; iy++) {

        particle = particles[i++] = new THREE.Sprite(material);
        particle.position.x = ix * SEPARATION - ((AMOUNTX * SEPARATION) / 2);
        particle.position.z = iy * SEPARATION - ((AMOUNTY * SEPARATION) / 2);
        scene.add(particle);

      }

    }

    renderer = new THREE.CanvasRenderer();
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    container.appendChild(renderer.domElement);

    window.addEventListener('resize', onWindowResize, false);

  }

  function onWindowResize() {

    windowHalfX = window.innerWidth / 2;
    windowHalfY = window.innerHeight / 2;

    camera.aspect = window.innerWidth;
    camera.updateProjectionMatrix();

    renderer.setSize(window.innerWidth, window.innerHeight);

  }

  function animate() {

    requestAnimationFrame(animate);

    render();

  }

  function render() {

    var i = 0;

    for (var ix = 0; ix < AMOUNTX; ix++) {

      for (var iy = 0; iy < AMOUNTY; iy++) {

        particle = particles[i++];
        particle.position.y = (Math.sin((ix + count) * 0.3) * 70) + (Math.sin((iy + count) * 0.5) * 50);
        particle.scale.x = particle.scale.y = (Math.sin((ix + count) * 0.3) + 1) * 4 + (Math.sin((iy + count) * 0.5) + 1) * 4;

      }

    }

    renderer.render(scene, camera);

    count += 0.05;

  }
</script>


